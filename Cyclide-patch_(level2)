"""Provides a scripting component.
    Inputs:
        x: The x script variable
        y: The y script variable
    Output:
        a: The a output variable"""

__author__ = "zlata"
__version__ = "2023.01.11"

import rhinoscriptsyntax as rs
import Rhino.Geometry as rg
import System
import System.Collections.Generic
import math

Points = []

# if Elliptic/Parabolic Boolen "False" the we have as a result Elliptic Dupin Cyclide, otherwise we have the Parabolic one

for i in range (len(u)):
    for j in range (len(v)):
        if (Elliptic_Parabolic == False):
            X = b*math.sin(2*math.pi*u[i])*(a-d*math.cos(2*math.pi*v[j]))/(a-math.sqrt(a**2-b**2)*math.cos(2*math.pi*u[i])*math.cos(2*math.pi*v[j]))
            Y = b*math.sin(2*math.pi*v[j])*(math.sqrt(a**2-b**2)*math.cos(2*math.pi*u[i])-d)/(a-math.sqrt(a**2-b**2)*math.cos(2*math.pi*u[i])*math.cos(2*math.pi*v[j]))
            Z = (-d*math.sqrt(a**2-b**2)+d*a*math.cos(2*math.pi*u[i])*math.cos(2*math.pi*v[j])-b**2*math.cos(2*math.pi*u[i]))/(a-math.sqrt(a**2-b**2)*math.cos(2*math.pi*u[i])*math.cos(2*math.pi*v[j]))
        else:
            X = (a*u[i]*(v[j]**2 + b))/(1+u[i]**2+v[j]**2)
            Y = (a*v[j]*(1+u[i]**2-b))/(1+u[i]**2+v[j]**2) 
            Z = (2*a*v[j]**2+a*b*(1-u[i]**2-v[j]**2))/(2*(1+u[i]**2+v[j]**2))
        Point = rg.Point3d(X, Y, Z)
        Points.append(Point)
        
Points = Points
